import { Project } from './types'

export const Project005: Project = {
  id: 'project-005',
  tags: ['C#', '개발', '회사 프로젝트'],
  title: '디바이스 초기화 프로그램',
  subtitle:
    '시리얼 통신 기반의 자동화 도구 개발을 통해 수동 초기화 프로세스 개선 및 생산 효율 향상을 위한 프로그램이에요.',
  challenge: '시리얼 통신',
  date: '2023.04 - 2023. 04.',
  image: '',
  links: [],
  libraries: [],
  role: '전체 기획부터 구현까지 단독으로 진행했어요.',

  content: (
    <>
      <h1>📌 주요 업무</h1>
      <h2>기기 초기화 자동화 설계 및 구현</h2>
      <ul>
        <li>
          기기별 초기화 수치를 엑셀 시트로 분리해 관리하고, 콤보박스 기반 조건 선택 기능을
          추가했어요.
        </li>
        <li>
          시리얼 통신으로 설정값을 자동 전송하고, 원클릭으로 초기화 프로세스를 실행하도록 했어요.
        </li>
      </ul>
      <h2> 하드코딩 구조 개선</h2>
      <ul>
        <li>코드에 하드코딩돼 있던 초기화 수치를 제거하고 엑셀 기반 관리 체계로 전환했어요.</li>
        <li>생산팀이 개발 의존 없이 독립적으로 수정·테스트할 수 있도록 만들었어요.</li>
      </ul>

      <h1>💡 제작 중 어려웠던 점</h1>
      <h2>레거시 소스 소실, 엑셀 연동 성능, 자동화 안정성</h2>
      <h3 className="bg-secondary/20">🚫 어려웠던 점</h3>
      <ul>
        <li>기존 소스가 소실돼 결과물을 역추적하며 기능을 재구성해야 했어요.</li>
        <li>
          <code>Interop.Excel</code> 초기 로딩이 무거워 성능 저하가 있었어요.
        </li>
        <li>시리얼 자동화 과정에서 예외 발생 시 흐름 제어가 어려웠어요.</li>
      </ul>
      <h3 className="bg-secondary/20">✅ 문제 해결 방법</h3>
      <ul>
        <li>
          리버스 엔지니어링으로 요구사항을 복원하고, 인터페이스를 재정의해 확장 가능하게 설계했어요.
        </li>
        <li>엑셀은 가벼운 리딩 전용 라이브러리로 교체해 처리 속도를 개선했어요.</li>
        <li>
          주요 함수 반환 타입을 <code>bool</code>로 바꾸고, 실패 시 상위 흐름을 즉시 중단하도록
          했어요.
        </li>
      </ul>
      <h3 className="bg-secondary/20">🌱 배운 점</h3>
      <ul>
        <li>요구사항 정의 → 설계 → 구현 → 검증의 전 과정을 스스로 운영하는 경험을 했어요.</li>
        <li>
          자동화 도구에서 예외 처리는 단순 알림이 아니라 흐름 제어의 핵심이라는 걸 체득했어요.
        </li>
      </ul>

      <h1>🚀 주요 성과 및 효과</h1>
      <h2>운영 효율과 품질 향상</h2>
      <ul>
        <li>반복적인 코드 수정 작업을 제거해 개발팀 리소스를 절감하고 생산팀 자율성을 높였어요.</li>
        <li>원클릭 초기화로 작업 속도·정확도를 높여 생산 현장 효율을 개선했어요.</li>
        <li>
          디바이스/시리얼/생산 프로세스에 대한 실무 이해가 높아져 이후 유지보수·자동화에도 기반이
          되었어요.
        </li>
      </ul>
    </>
  ),
}
